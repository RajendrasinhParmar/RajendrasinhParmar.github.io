---
import { type CollectionEntry, getCollection } from "astro:content";
import Books from "@layouts/Books.astro";
import BookDetails from "@layouts/BookDetails.astro";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";
import { filterBookByDraft } from "@utils/common";
import getSortedBooks from "@utils/getSortedBooks";
export interface Props {
  post: CollectionEntry<"book">;
}

export async function getStaticPaths() {
  const posts = await getCollection("book", filterBookByDraft);

  const postResult = posts.map(post => ({
    params: { slug: slugify(post.data) },
    props: { post },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const books = await getCollection("book", filterBookByDraft);

const sortedBooks = getSortedBooks(books);

const totalPages = getPageNumbers(sortedBooks.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedBooks = sortedBooks.slice(startPost, lastPost);
---

{
  post ? (
    <BookDetails book={post} />
  ) : (
    <Books
      books={paginatedBooks}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
